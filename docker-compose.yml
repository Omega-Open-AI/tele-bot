version: '3.8'

services:
  # Redis service for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: telegram-bot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - telegram-bot-network
    environment:
      - REDIS_REPLICATION_MODE=master
    # Uncomment the following lines to enable Redis authentication
    # command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpassword} --appendonly yes
    # environment:
    #   - REDIS_PASSWORD=${REDIS_PASSWORD:-defaultpassword}

  # Main Telegram bot application
  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=3.11
    container_name: telegram-draft-bot
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      # Required environment variables
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - REDIS_URL=redis://redis:6379
      
      # Optional configuration
      - MAX_PROMPT_LENGTH=${MAX_PROMPT_LENGTH:-500}
      - RATE_LIMIT_PER_USER=${RATE_LIMIT_PER_USER:-10}
      - HUGGINGFACE_API_BASE_URL=${HUGGINGFACE_API_BASE_URL:-https://api-inference.huggingface.co/models}
      - MAX_IMAGE_SIZE=${MAX_IMAGE_SIZE:-1024}
      - IMAGE_QUALITY=${IMAGE_QUALITY:-85}
      - API_TIMEOUT=${API_TIMEOUT:-30}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Production settings
      - ENVIRONMENT=production
      - DEBUG=false
    volumes:
      # Mount logs directory for persistent logging
      - ./logs:/app/logs
      # Mount configuration if needed
      # - ./config:/app/config:ro
    networks:
      - telegram-bot-network
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis', port=6379); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Redis Commander for Redis management (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: telegram-bot-redis-commander
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin}
    ports:
      - "8081:8081"
    networks:
      - telegram-bot-network
    profiles:
      - development
      - debug

  # Optional: Monitoring with Prometheus (production)
  prometheus:
    image: prom/prometheus:latest
    container_name: telegram-bot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - telegram-bot-network
    profiles:
      - monitoring
      - production

  # Optional: Grafana for visualization (production)
  grafana:
    image: grafana/grafana:latest
    container_name: telegram-bot-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - telegram-bot-network
    profiles:
      - monitoring
      - production

networks:
  telegram-bot-network:
    driver: bridge
    name: telegram-bot-network

volumes:
  redis_data:
    driver: local
    name: telegram-bot-redis-data
  prometheus_data:
    driver: local
    name: telegram-bot-prometheus-data
  grafana_data:
    driver: local
    name: telegram-bot-grafana-data

# Development override example
# Create docker-compose.override.yml for local development:
# version: '3.8'
# services:
#   telegram-bot:
#     build:
#       target: development
#     volumes:
#       - .:/app
#       - /app/venv
#     environment:
#       - DEBUG=true
#       - LOG_LEVEL=DEBUG
#     command: python -m debugpy --listen 0.0.0.0:5678 --wait-for-client main.py
#     ports:
#       - "5678:5678"